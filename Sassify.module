<?php
/**
 * Sassify module for ProcessWire CMS
 * by Rudy Affandi (2016)
 * https://github.com/lesaff
 * MIT License
 */

require __DIR__ . '/vendor/autoload.php';

use Leafo\ScssPhp\Compiler;

class Sassify extends WireData implements Module {
 
    // Init global configuration variables.
    private static $cssFilename; 
    private static $cssPath; 
    private static $cssUrl; 
    private static $numberPrecision;
    private static $outputFormat;
    private static $templatePath; 


    /**
     * ------------------------------------------------------------------------
     * getModuleInfo is a module required by all modules to tell 
     * ProcessWire about them
     * ------------------------------------------------------------------------
     * @return array
     */
    public static function getModuleInfo() 
    {
        return [
            'title'    => "Sassify",
            'version'  => "0.0.2",
            'summary'  => "Compile SASS/SCSS/Compass and use it in your project.",
            'author'   => "Rudy Affandi",
            'href'     => "https://github.com/lesaff/ProcessWire-Sassify",
            'icon'     => "css3",
 
            // use autoload if module is to be called each load, if it is only needed to setup something set to false
            'autoload' => true,
            'singular' => true,
            'requires' => "ProcessWire>=2.5",
        ];
    }

    
    /**
     * Initialize module
     */
    public function init() 
    {

        // Set module config
        self::$cssFilename     = wire('sanitizer')->name($this->css_filename);
        self::$cssPath         = $this->css_path;
        self::$cssUrl          = $this->css_url;
        self::$numberPrecision = $this->css_number_precision;
        self::$outputFormat    = $this->sass_formatter;
        self::$templatePath    = wire('config')->paths->templates;
    }


    /**
     * Process css, scss and sass and compile result
     *
     * @param      string  $stylesheets  The stylesheets
     *
     * @return     string  ( description_of_the_return_value )
     */
    public static function css($stylesheets)
    {
    	
    	// Initialize compiler
		$scss = new Compiler();

        // Set output format
        $scss->setFormatter(self::$outputFormat);

        // Set number precision
        $scss->setNumberPrecision(self::$numberPrecision);

        // Iterate each stylesheet
        if (! is_array($stylesheets)) {
            $imports[] = '@import "' . self::$templatePath . $stylesheets . '"';
        }

        foreach ($stylesheets as $stylesheet) {
            $imports[] = '@import "' . self::$templatePath . $stylesheet . '"';
        }

        // Compile it
        $compiled = $scss->compile(implode(';', $imports));

		// Save to template/styles
		file_put_contents(self::$cssPath . self::$cssFilename . '.css', $compiled);

		// Return saved file path
		return self::$cssUrl . self::$cssFilename . '.css';
    }

}
